name: Monitor repo & Pages (day 5m / night 30m, silent artifacts)

on:
  schedule:
    - cron: "*/5 * * * *"   # chạy mỗi 5 phút (UTC); sẽ tự gác cổng theo giờ Berlin
  workflow_dispatch:

permissions:
  contents: read
  pages: read

concurrency:
  group: "monitor-pages"
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      # 0) Quyết định chạy/skip theo giờ Europe/Berlin
      - name: Gate by local time (Europe/Berlin)
        id: gate
        shell: bash
        run: |
          HOUR=$(TZ=Europe/Berlin date +%H)
          MIN=$(TZ=Europe/Berlin date +%M)

          # Ban ngày: 08:00–23:59 hoặc 00:00–01:59
          if [ "$HOUR" -ge 8 ] || [ "$HOUR" -lt 2 ]; then
            echo "mode=day" >> "$GITHUB_OUTPUT"
            echo "DAY in Berlin ($HOUR:$MIN). Run."
          else
            # Ban đêm 02:00–07:59 -> chỉ phút 00/30 mới chạy
            if [ $((10#$MIN % 30)) -eq 0 ]; then
              echo "mode=night_run" >> "$GITHUB_OUTPUT"
              echo "NIGHT in Berlin ($HOUR:$MIN) at 00/30. Run."
            else
              echo "mode=skip" >> "$GITHUB_OUTPUT"
              echo "NIGHT in Berlin ($HOUR:$MIN) not 00/30. Skip."
            fi
          fi

      - name: Checkout
        if: steps.gate.outputs.mode != 'skip'
        uses: actions/checkout@v4

      - name: Install jq
        if: steps.gate.outputs.mode != 'skip'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # (A) Sinh context nhẹ: routes, fingerprint các file quan trọng
      - name: Build lightweight context (context.json)
        if: steps.gate.outputs.mode != 'skip'
        run: |
          node - <<'NODE'
          const fs = require('fs'), crypto = require('crypto');
          function read(p){ try { return fs.readFileSync(p,'utf8') } catch { return '' } }
          function sha(s){ return crypto.createHash('sha256').update(s).digest('hex') }
          const files = [
            'src/App.tsx',
            'src/components/BlogSection.tsx',
            'src/pages/Blog.tsx',
            'src/pages/categories/LoveFamily.tsx',
            'src/pages/categories/Lifestyle.tsx',
            'src/pages/categories/Legal.tsx',
            'src/pages/categories/Finance.tsx',
            'vite.config.ts',
            '.github/workflows/deploy.yml'
          ].filter(f => fs.existsSync(f));
          const out = { created_at: new Date().toISOString(), routes: [], files: {} };
          const app = read('src/App.tsx');
          out.routes = [...app.matchAll(/<Route\s+path="([^"]+)"/g)].map(m=>m[1]);
          for (const f of files) {
            const t = read(f);
            out.files[f] = { sha256: sha(t), lines: t ? t.split('\n').length : 0 };
            if (f.endsWith('BlogSection.tsx') && t) {
              out.files[f].featuredTitles = [...t.matchAll(/title:\s*'([^']+)'/g)].map(m=>m[1]);
            }
          }
          fs.mkdirSync('.monitor', { recursive: true });
          fs.writeFileSync('.monitor/context.json', JSON.stringify(out,null,2));
          NODE

      # (B) Lấy commit & GitHub Pages status → status.json (fail-soft để tránh email lỗi)
      - name: Collect repo + pages status (status.json)
        if: steps.gate.outputs.mode != 'skip'
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: TH01157
          REPO: inni-queen-germany-guide
        run: |
          mkdir -p .monitor
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          LATEST=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO/commits?sha=main&per_page=1" || true)
          SHA=$(echo "$LATEST" | jq -r '.[0].sha // "unknown"')
          COMMIT_DATE=$(echo "$LATEST" | jq -r '.[0].commit.committer.date // "unknown"')
          MESSAGE=$(echo "$LATEST" | jq -r '.[0].commit.message // "unknown"' | head -c 200)
          AUTHOR=$(echo "$LATEST" | jq -r '.[0].commit.committer.name // "unknown"')

          PAGES=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO/pages" || true)
          PAGES_STATUS=$(echo "$PAGES" | jq -r '.status // "unknown"')

          BUILD=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO/pages/builds/latest" || true)
          BUILD_STATUS=$(echo "$BUILD" | jq -r '.status // "unknown"')

          cat > .monitor/status.json <<EOF
          {
            "mode": "${{ steps.gate.outputs.mode }}",
            "checked_at": "$NOW",
            "latest_commit": {
              "sha": "$SHA",
              "date": "$COMMIT_DATE",
              "author": "$AUTHOR",
              "message": "$MESSAGE"
            },
            "pages": {
              "status": "$PAGES_STATUS",
              "build_status": "$BUILD_STATUS"
            }
          }
          EOF

      # (C) Upload artifact (KHÔNG commit) → im lặng tuyệt đối
      - name: Upload monitor artifacts
        if: steps.gate.outputs.mode != 'skip'
        uses: actions/upload-artifact@v4
        with:
          name: monitor-${{ github.run_id }}
          path: .monitor/
          retention-days: 7
